#!/usr/bin/env python3

"""
Fix-up the product information in an OTA package to match deployment
fingerprints for individual devices. The meta-data pre-build, post-build, and
pre-device fields are adjusted according the fingerprint parameters.

Usage: ota_deployment_fixup <options> <input_ota_zip> <output_file>

  -k  (--package_key) <key pair name>
      Use the specified key pair to sign the output OTA package.
      Defaults to AOSP testkey.
  -M  (--pre_fish_name) Optional fish name on prior build.

  -V  (--variant) Name of the IRDA variant as expressed in the
      board configuration FLASHFILES_VARIANTS. Required.
  -T  (--target_files) Path to target files package used to create
      the supplied OTA update zip. Required.
  -S  (--source_target_files) If the OTA is incremental, path to
      source TFP used to create the supplied OTA (the --incremental_from
      argument to ota_from_target_files)

  -f  (--fish_name) The fish name that this is built for
  -l  (--lunch) The lunch target used for this project
  -B  (--brand) <brand>
  -P  (--product) <product>
  -D  (--device) <device>
      Replacement parameters for the brand, product, and device portions of
      the deployment fingerprints. All of these parameters must
      be specified on the command line if this information can't be retrieved
      from the target-files-package.
"""

import sys
import os
import zipfile
import tempfile
import imp
import re
import shutil
import hashlib

if None == os.environ.get('ANDROID_BUILD_TOP'):
    print "I'm hungry. Feed me lunch."
    sys.exit(1)

# Android Release Tools
sys.path.append(os.environ['ANDROID_BUILD_TOP']+"/build/tools/releasetools")
import common
import edify_generator

sys.path.append(os.environ['ANDROID_BUILD_TOP']+"/device/intel/build/releasetools")
import intel_common
import multiprocessing

OPTIONS = common.OPTIONS
OPTIONS.pre_fish_name = None
OPTIONS.brand = None
OPTIONS.device = None
OPTIONS.product = None
OPTIONS.fish_name = None
OPTIONS.tfp = None
OPTIONS.source_tfp = None
OPTIONS.lunch = None
OPTIONS.incremental = False
OPTIONS.variant = False
OPTIONS.base_variant = False
OPTIONS.source_info_dict = None
OPTIONS.buildnum = None

# TODO: fetch default for this out default_system_dev_certificate in the TFP
# once a TFP is a required argument
OPTIONS.package_key = os.path.join(os.environ['ANDROID_BUILD_TOP'],
        "build/target/product/security/testkey")

verify_end_str = "---- start making changes here ----"

OPTIONS.worker_threads = multiprocessing.cpu_count()

_TARGET_LINE_PREFIX = "(bootloader) target: "
_HASH_LINE_PREFIX = "(bootloader) hash: "
_IFWI_PREFIX = "(bootloader) version: "

def process_metadata(data):
    lines = data.split("\n")
    linesout = []
    fingerprint_new = OPTIONS.brand+'/'+OPTIONS.product+'/'+OPTIONS.device
    for line in lines:
        if line == "":
            linesout.append(line)
            continue
        k,v = line.split('=')
        if k == "pre-build":
            segments = v.split(':')
            segments[0] = fingerprint_new
            linesout.append('='.join([k,':'.join(segments)]))
#        elif k == "pre-device":
#            if OPTIONS.device:
#                linesout.append('='.join([k,OPTIONS.device]))
        elif k == "post-build-incremental":
            if OPTIONS.buildnum:
                linesout.append('='.join([k,OPTIONS.buildnum]))
        else:
            linesout.append(line)
    return '\n'.join(linesout)

def process_hashfile(data, bootloader):
    linesout = []
    line_bootloader = ""
    lines = data.split("\n")
    index = 0
    for i in range(len(lines)):
        line = lines[i]
        if not line.startswith(_TARGET_LINE_PREFIX):
            continue

        target = line[len(_TARGET_LINE_PREFIX):]
        i = i + 1
        linesout.append(line)
        line = lines[i]

        if line.startswith(_IFWI_PREFIX):
            linesout.append(line)
        else:
            if not line.startswith(_HASH_LINE_PREFIX):
                raise Exception("unexpected Fastboot output")
            if target == '/bootloader':
                line_bootloader = _HASH_LINE_PREFIX + str(hashlib.sha1(bootloader).hexdigest())
                print "dbg: ", line_bootloader
                linesout.append(line_bootloader)
            else:
                linesout.append(line)

    return '\n'.join(linesout)

def process_updater_script(data, unpack_dir):
    lines = data.split("\n")
    linesout = []
    fingerprint_new = OPTIONS.brand+'/'+OPTIONS.product+'/'+OPTIONS.device
    fingerprint_old = ['intel/'+OPTIONS.fish_name+'/'+OPTIONS.fish_name]
    if OPTIONS.pre_fish_name:
        fingerprint_old.append('intel/'+OPTIONS.pre_fish_name+'/'+OPTIONS.pre_fish_name)
        fingerprint_old.append('intel/'+OPTIONS.pre_fish_name+'/'+OPTIONS.fish_name)
    if OPTIONS.lunch:
        fingerprint_old.append('intel/'+OPTIONS.lunch+'/'+OPTIONS.lunch)
        fingerprint_old.append('intel/'+OPTIONS.lunch+'/'+OPTIONS.fish_name)


    pfx = re.compile('|'.join(fingerprint_old))
    for line in lines:
          if line.startswith('getprop("ro.product.device") =='):
               linesout.append(line.replace(OPTIONS.fish_name, OPTIONS.device))
          else:
               linesout.append(pfx.sub(fingerprint_new, line))

    # Check the provdata archive for extra edify commands to inject into the OTA
    # script
    provdata = common.UnzipTemp(os.path.join(unpack_dir,
                "RADIO", "provdata_" + OPTIONS.variant +".zip"))
    provdata_zip = zipfile.ZipFile(os.path.join(unpack_dir,
                "RADIO", "provdata_" + OPTIONS.variant +".zip"), "r")
    extra_script_path = os.path.join(provdata, "extra_script.edify")
    if os.path.exists(extra_script_path):
        print "Appending extra Edify script commands"
        with open(extra_script_path) as es:
            linesout.extend(es.readlines())

    return '\n'.join(linesout)

def patch_edify_script(verify_script, script_data, install_script):
    # Patches the existing edify script_data with the verify_script,
    # which is the script to be inserted at the end of the VerifyEnd
    # section and the install_script, which is the script to be inserted
    # at the beginning of the InstallEnd section.
    lines = script_data.split("\n")
    for i in range(len(lines)):
        if verify_end_str in lines[i]:
            verify_index = i
            break

    # All lines up to the verification line
    lines1 = lines[:verify_index]
    # The verification line
    vline = [lines[verify_index]]
    # All lines after the verification line
    lines2 = lines[(verify_index + 1):]

    newlines = lines1 + verify_script + vline + install_script + lines2;
    return "\n".join(newlines)

def compute_new_bootloader_patches_efi(source_tfp_dir, target_tfp_dir, ota_zip,
        output_zip, script_data):
    print "Computing new bootloader patches..."
    output_files, delete_files, patch_list, verbatim_targets = \
            intel_common.ComputeBootloaderPatch(source_tfp_dir,
                                                target_tfp_dir,
                                                variant=OPTIONS.variant,
                                                base_variant=OPTIONS.base_variant,
                                                existing_ota_zip=ota_zip)
    for f in output_files:
        print "Adding",f.name
        f.AddToZip(output_zip)

    # This script needs to be inserted into the main script at the
    # end of VerifyEnd section
    vscript = edify_generator.EdifyGenerator(3, OPTIONS.info_dict,
              fstab=OPTIONS.source_info_dict["fstab"])

    for tf, sf in patch_list:
        vscript.PatchCheck("/"+tf.name, tf.sha1, sf.sha1)
    vscript = vscript.script

    # This script needs to be inserted into the main script at the
    # beginning of InstallEnd section
    script = edify_generator.EdifyGenerator(3, OPTIONS.info_dict,
              fstab=OPTIONS.source_info_dict["fstab"])

    if delete_files:
        script.Print("Removing unnecessary firmware files...")
        script.DeleteFiles(delete_files)

    if patch_list:
        script.Print("Patching firmware files...")
        for tf, sf in patch_list:
            script.ApplyPatch("/"+tf.name, "-", tf.size, tf.sha1, sf.sha1, "patch/"+tf.name+".p")

    if verbatim_targets:
        script.Print("Adding firmware files...")
        script.UnpackPackageDir("bootloader", "/bootloader")
    script = script.script

    edify_patch = patch_edify_script(vscript, script_data, script)
    return edify_patch

def compute_new_bootloader_patches_sofia(source_tfp_dir, target_tfp_dir, ota_zip,
        output_zip, script_data):
    print "Computing new fwupdater patches..."
    verbatim, fwu_patch, output_file = \
            intel_common.ComputeFWUpdatePatches(source_tfp_dir,
                                                target_tfp_dir,
                                                variant=OPTIONS.variant,
                                                existing_ota_zip=ota_zip)
    # The verify_script needs to be inserted into the main edify script
    # at the end of VerifyEnd section. The verify_script edify code ensures
    # fwupdate partition is in an expected state before the OTA system makes
    # any changes.
    verify_script = edify_generator.EdifyGenerator(3, OPTIONS.info_dict)

    fwu_type, fwu_device = common.GetTypeAndDevice("/fwupdate", OPTIONS.info_dict)
    if not verbatim and fwu_patch:
      (tf, sf) = fwu_patch
      verify_script.PatchCheck("%s:%s:%d:%s:%d:%s" %
                             (fwu_type, fwu_device, sf.size,
                              sf.sha1, tf.size, tf.sha1))
      common.ZipWriteStr(output_zip, "patch/fwu_image.bin.p", output_file)

    verify_script = verify_script.script

    # The install_script needs to be inserted into the main script at the
    # beginning of InstallEnd section. The install_script edify code applies
    # the patch diffs.
    install_script = edify_generator.EdifyGenerator(3, OPTIONS.info_dict)

    if verbatim:
        install_script.Print("Adding FWImage verbatim...")
        intel_common.AddFWImageFile(target_tfp_dir, output_zip, OPTIONS.variant)

        #Set progress bar to end of FLS extraction
        install_script.SetProgress(0.6)
        install_script.WriteRawImage("/fwupdate", "fwu_image.bin");
    elif fwu_patch:
        install_script.Print("Patching firmware files...")
        install_script.ApplyPatch("%s:%s:%d:%s:%d:%s" % (fwu_type, fwu_device, sf.size,
                                                  sf.sha1, tf.size, tf.sha1),
                           "-", tf.size, tf.sha1, sf.sha1,
                           "patch/fwu_image.bin.p")

    install_script = install_script.script
    edify_patch = patch_edify_script(verify_script, script_data, install_script)
    return edify_patch

def check_arg(arg, errortext):
    if not arg:
        sys.stderr.write(errortext + "\n")
        common.Usage(__doc__)
        sys.exit(1)

def replace_in_zip(zip_filename, data, item):
    os.system("zip -d %s %s"%(zip_filename, item))
    zip = zipfile.ZipFile(zip_filename, "a")
    zip.writestr(item, data, compress_type=zipfile.ZIP_DEFLATED)
    zip.close()

def main(argv):
    def option_handler(o, a):
        if o in ("-B", "--brand"):
            OPTIONS.brand = a
        elif o in ("-P", "--product"):
            OPTIONS.product = a
        elif o in ("-D", "--device"):
            OPTIONS.device = a
        elif o in ("-k", "--package_key"):
            OPTIONS.package_key = a
        elif o in ("-M", "--pre_fish_name"):
            OPTIONS.pre_fish_name = a
        elif o in ("-f", "--fish_name"):
            OPTIONS.fish_name = a
        elif o in ("-T", "--target_files"):
            OPTIONS.tfp = a
        elif o in ("-S", "--source_target_files"):
            OPTIONS.source_tfp = a
            OPTIONS.incremental = True
        elif o in ("-V", "--variant"):
            OPTIONS.variant = a
        elif o in ("-L", "--legacy_variant"):
            OPTIONS.base_variant = a
        elif o in ("-l", "--lunch"):
            OPTIONS.lunch = a
        elif o in ("-b", "--buildnum"):
            OPTIONS.buildnum = a
        else:
            return False
        return True

    args = common.ParseOptions(argv, __doc__,
            extra_opts = "B:P:D:k:M:f:T:S:V:L:l:b",
            extra_long_opts = ["brand=","pre_fish_name=","fish_name=",
                "product=", "device=", "package_key=", "target_files=",
                "source_target_files=", "variant=", "legacy_variant=",
                "lunch=","buildnum="],
            extra_option_handler = option_handler)

    check_arg(OPTIONS.tfp, "Missing --target_files option")
    check_arg(OPTIONS.variant, "Missing --variant option")

    # TODO would be nice to analyze the OTA package to determine whether it is
    # a full image or incremental update and require or reject -S accordingly

    if len(args) != 2:
        common.Usage(__doc__)
        sys.exit(1)

    input_zip = zipfile.ZipFile(args[0])

    print "Decompressing target-files-packages..."
    tfp_dir = common.UnzipTemp(OPTIONS.tfp, ["RADIO/*"])
    tfp_zip = zipfile.ZipFile(OPTIONS.tfp, "r")
    OPTIONS.info_dict = common.LoadInfoDict(tfp_zip)

    if OPTIONS.incremental:
        source_tfp_dir = common.UnzipTemp(OPTIONS.source_tfp, ["RADIO/*"])
        source_tfp_zip = zipfile.ZipFile(OPTIONS.source_tfp, "r")
        OPTIONS.source_info_dict = common.LoadInfoDict(source_tfp_zip)

    dmap = intel_common.load_device_mapping_from_tfp(tfp_dir)
    if dmap:
        if OPTIONS.variant in dmap:
            if '__version__' in dmap: # Versions >= 1 have the version key
                if dmap['__version__'] == 1:
                    OPTIONS.brand, OPTIONS.product, OPTIONS.device, \
                    OPTIONS.lunch, OPTIONS.fish_name, \
                    OPTIONS.base_variant = dmap[OPTIONS.variant]
                else:
                    print "Invalid/unsupported device map version number"
            else:   # Version 0 does not have the version key
                OPTIONS.brand, OPTIONS.product, OPTIONS.device, \
                OPTIONS.fish_name, OPTIONS.base_variant = dmap[OPTIONS.variant]
        else:
            print "Missing information for target variant", OPTIONS.variant
    else:
        print "Couldn't get device mapping information from", OPTIONS.tfp

    if OPTIONS.base_variant == OPTIONS.variant:
        OPTIONS.base_variant = None
    check_arg(OPTIONS.brand and OPTIONS.product and OPTIONS.device and OPTIONS.fish_name,
              "Missing one of -B, -P, -D, -f and cannot get this info from target-files")

    platform_efi, sofia = intel_common.CheckIfSocEFI(tfp_dir, OPTIONS.variant)
    OPTIONS.info_dict = common.LoadInfoDict(tfp_zip)
    print "Processing OTA update contents.."
    _, temp_zip = tempfile.mkstemp(suffix=".zip")
    shutil.copyfile(input_zip.filename, temp_zip)
    for zi in input_zip.infolist():
        if zi.filename == "META-INF/com/android/metadata":
            data = process_metadata(input_zip.read(zi))
            replace_in_zip(temp_zip, data, zi.filename)
        elif zi.filename == "META-INF/com/google/android/updater-script":
            sdata = input_zip.read(zi)
            sdata = process_updater_script(sdata, tfp_dir)
            if OPTIONS.incremental and platform_efi:
                output_zip = zipfile.ZipFile(temp_zip, "a")
                sdata = compute_new_bootloader_patches_efi(source_tfp_dir,
                        tfp_dir, input_zip, output_zip, sdata)
                output_zip.close()
            elif OPTIONS.incremental and not platform_efi:
                output_zip = zipfile.ZipFile(temp_zip, "a")
                sdata = compute_new_bootloader_patches_sofia(source_tfp_dir,
                        tfp_dir, input_zip, output_zip, sdata)
                output_zip.close()
            replace_in_zip(temp_zip, sdata, zi.filename)
        elif zi.filename == "bootloader.img":
            new_bi = intel_common.GetBootloaderImageFromTFP(tfp_dir,
                    variant=OPTIONS.variant)
            replace_in_zip(temp_zip, new_bi, zi.filename)
        elif zi.filename == "verify/hashesfromtgt.txt":
            new_bi = intel_common.GetBootloaderImageFromTFP(tfp_dir,
                    variant=OPTIONS.variant)
            data = process_hashfile(input_zip.read(zi),new_bi)
            replace_in_zip(temp_zip, data, zi.filename)
        elif zi.filename == "fwu_image.bin" and not platform_efi:
            os.system("zip -d %s %s"%(temp_zip, zi.filename))
            output_zip = zipfile.ZipFile(temp_zip, "a")
            intel_common.AddFWImageFile(tfp_dir, output_zip, variant=OPTIONS.variant)
            output_zip.close()

    print "Signing fixed-up package", args[1]
    passwords = common.GetKeyPasswords([OPTIONS.package_key])
    common.SignFile(temp_zip, args[1], OPTIONS.package_key, passwords[OPTIONS.package_key], whole_file=True)
    os.unlink(temp_zip)

    print "All done."

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except common.ExternalError, e:
        print
        print "   ERROR: %s" % (e,)
        print
        sys.exit(1)
    finally:
        common.Cleanup()

