#!/usr/bin/env python
#
# Copyright (C) 2016 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Re-sign ABL related binaries found in RADIO/provdata.zip with production
keys.
Usage: sign_target_files_abl <options> <input_target_files_zip> <output_file>
  -K  (--oem-key) <path to new keypair>
      Replace the OEM key inside kernelflinger with the replacement copy.
      Expects a key pair assuming private key ends in .pk8 and public key
      with .x509.pem

  -A  (--avb-key) <path>
      Replace the Android Verified Boot key with the key in path

  -I  (--ifwi-directory) <path>
      Path to the resigned IFWI, which is a directory contain all the resigned IFWI binaries.

  -T  (--tos) <path>
      Path to the resigned tos image

  -V  (--variant) variant
  variant can be gr_mrb(A0) or gr_mrb_b1(B1)

  -G  (--guest-target)
      To be used for ACRN/AaaG
"""

import sys
import shutil
import zipfile
import os
import os.path
import shlex
import tempfile
import subprocess
import struct
from pyasn1.error import PyAsn1Error
from pyasn1.codec.ber import decoder as ber_decoder
from pyasn1_modules import rfc5208 as pkcs8

import json

if sys.hexversion < 0x02040000:
    print >> sys.stderr, "Python 2.4 or newer is required."
    sys.exit(1)

# Android Release Tools
sys.path.append("build/tools/releasetools")
import common

sys.path.append("device/intel/build/releasetools")
import intel_common

OPTIONS = common.OPTIONS
OPTIONS.ifwi_directory = ""
OPTIONS.variant = ""
OPTIONS.all_keys = set()
OPTIONS.oem_key = None
OPTIONS.avb_key = None
OPTIONS.tos_image = None
OPTIONS.target_product = None
OPTIONS.guest_target = False
GiB = (1 << 30)
crc_len = 4
blk_sz  = 1024
# osloader_blk_offset will be set to 16384 in AaaG case and in SBL case
osloader_blk_offset = 8000
#bootloader.img block size
bootloader_bs = 1024
#bootloader.img filesystem size
bootloader_fs_sz = 30*1024*1024
ias_image_type_str = "0x40300"
# osloader_component_num will be set to 2 in AaaG case
osloader_component_num = 4

def get_section_elf32(data, name):
    section_table_offset = struct.unpack_from("<I", data, 0x20)[0]
    section_entry_sz, num_sections, str_table_idx = struct.unpack_from("<HHH", data, 0x2E)
    str_table_offset = section_table_offset + (str_table_idx * section_entry_sz)
    _, _, _, _, str_section_offset, str_section_size, _, _, _, _ = struct.unpack_from("<10I", data, str_table_offset)

    for i in range(num_sections):
        section_offset = section_table_offset + (i * section_entry_sz)
        section_table_data = struct.unpack_from("<10I", data, section_offset)

        section_name_idx, _, _, _, section_offset, section_size,  _, _, _, _ = section_table_data
        section_name = data[str_section_offset + section_name_idx:str_section_offset + section_name_idx + len(name)]
        if section_name != name:
            continue
        print "Found", section_name, "at offset", hex(section_offset)
        return (section_offset, section_size)

    raise common.ExternalError("Section not found")

def get_section_elf64(data, name):
    section_table_offset = struct.unpack_from("<Q", data, 0x28)[0]
    section_entry_sz, num_sections, str_table_idx = struct.unpack_from("<HHH", data, 0x3A)
    str_table_offset = section_table_offset + (str_table_idx * section_entry_sz)
    _, _, _, _, str_section_offset, str_section_size, _, _, _, _ = struct.unpack_from("<IIQQQQIIQQ", data, str_table_offset)

    for i in range(num_sections):
        section_offset = section_table_offset + (i * section_entry_sz)
        section_table_data = struct.unpack_from("<IIQQQQIIQQ", data, section_offset)

        section_name_idx, _, _, _, section_offset, section_size,  _, _, _, _ = section_table_data
        section_name = data[str_section_offset + section_name_idx:str_section_offset + section_name_idx + len(name)]
        if section_name != name:
            continue
        print "Found", section_name, "at offset", hex(section_offset)
        return (section_offset, section_size)

    raise common.ExternalError("Section not found")

def get_section(data, name):
    e_machine = struct.unpack_from("<H", data, 0x12)[0]
    if e_machine == 0x3E:
        # Found x86_64 ELF binary type
        return get_section_elf64(data, name)
    else:
        # By default use x86_32 ELF binary type
        return get_section_elf32(data, name)

def replace_raw_keys(data, raw_key, password):
    (oemkeys_offset, oemkeys_size) = get_section(data, ".oemkeys")

    oem_key_file = open(raw_key, "rb")
    oem_key_data = zero_pad(oem_key_file.read(), oemkeys_size)
    oem_key_file.close()

    data = (data[:oemkeys_offset] + oem_key_data +
            data[oemkeys_offset + oemkeys_size:])
    return data

def replace_pem_keys(data, oem_key_pair, password):
    (oemkeys_offset, oemkeys_size) = get_section(data, ".oemkeys")

    oem_key_data_der_file = intel_common.pem_cert_to_der_cert(oem_key_pair +
            OPTIONS.public_key_suffix)
    oem_key_data = zero_pad(oem_key_data_der_file.read(), oemkeys_size)
    oem_key_data_der_file.close()

    data = (data[:oemkeys_offset] + oem_key_data +
            data[oemkeys_offset + oemkeys_size:])
    return data

def get_named_temp(prefix=None):
    f = tempfile.NamedTemporaryFile(prefix=prefix, delete=False)
    OPTIONS.tempfiles.append(f.name)
    f.close()
    return f.name


def extract_to_temp(input_zip, path, prefix=None):
    f = tempfile.NamedTemporaryFile(prefix=prefix, delete=False)
    OPTIONS.tempfiles.append(f.name)
    f.write(input_zip.read(path))
    f.close()
    return f.name


def zero_pad(data, size):
    if len(data) > size:
        raise common.ExternalError("Binary is already larger than pad size")

    return data + (b'\x00' * (size - len(data)))


def process_provzip(input_provzip, output_provzip, passwords):
    for zi in input_provzip.infolist():
        path = zi.filename
        data = input_provzip.read(zi)

        if OPTIONS.verbose:
            print "Processing",path

        if OPTIONS.guest_target == False:
            # Replace the ifwi binaries with the new generated content
            if path in ["ifwi.bin", "ifwi_dnx.bin", "fastboot"]:
                fn = os.path.join(OPTIONS.ifwi_directory, path)
                with open(fn) as f:
                    data=f.read()

        if path == "bootloader":
            out_file = tempfile.NamedTemporaryFile(prefix="bootloader")
            dn = tempfile.mkdtemp()
            in_fname = input_provzip.extract(path, dn)
            process_bootloader(in_fname, out_file.name)
            output_provzip.write(out_file.name, path)
            shutil.rmtree(dn)
            continue

        output_provzip.writestr(zi, data)


def process_bootloader(in_f, out_f):
    d1 = tempfile.mkdtemp()
    cmd = ["dd"]
    cmd.append("if=%s"%(in_f))
    cmd.append("bs=%d"%(blk_sz))
    cmd.append("skip=%d"%(osloader_blk_offset))
    cmd.append("of=%s"%(os.path.join(d1,"osloader.bin")))
    p = common.Run(cmd)
    p.wait()
    process_osloader(os.path.join(d1, "osloader.bin"), os.path.join(d1, "osloader_resigned.bin"))

    #make a new directory to prepare for new bootloader file directory
    #which will be used to generate the new bootloader
    d2 = tempfile.mkdtemp()
    if OPTIONS.guest_target == False:
        #copy the resigned ifwi_update.bin
        ifwi_update_fn = os.path.join(OPTIONS.ifwi_directory, "ifwi_update.bin")
        ifwi_update_fn2 = os.path.join(d2, "ifwi_update.bin")
        shutil.copy2(ifwi_update_fn, ifwi_update_fn2)

    #copy the resigned osloader.bin
    osloader_fn = os.path.join(d1, "osloader_resigned.bin")
    osloader_fn2 = os.path.join(d2, "osloader.bin")
    shutil.copy2(osloader_fn, osloader_fn2)

    #make the new bootlader image
    if OPTIONS.guest_target == False:
        cmd = ["dd"]
        cmd.append("if=%s"%(ifwi_update_fn2))
        cmd.append("bs=%d"%(blk_sz))
        cmd.append("of=%s"%(out_f))
        p = common.Run(cmd)
        p.wait()
    cmd = ["dd"]
    cmd.append("if=%s"%(osloader_fn2))
    cmd.append("bs=%d"%(blk_sz))
    cmd.append("seek=%d"%(osloader_blk_offset))
    cmd.append("of=%s"%(out_f))
    p = common.Run(cmd)
    p.wait()
    assert p.returncode == 0, "bootader.img generation failed: %d" % p.returncode

    #cleanup the temporary directories
    shutil.rmtree(d1)
    shutil.rmtree(d2)


def process_iasimage(in_f, out_f):
    """
      resign the iasimage with new verity key
    """
    #get the unsigned iasimage binary
    #the method is to get the payload offset plus
    #palyload length plus the crc checksum
    s = struct.Struct('I I I I I I I')
    with open(in_f, 'rb') as fh:
        u = s.unpack(fh.read(struct.calcsize(s.format)))
        data_len = u[3]
        data_off = u[4]
        unsigned_len = data_off + data_len + crc_len
        fh.seek(0,0)
        data = fh.read(unsigned_len)

    tf = tempfile.NamedTemporaryFile()
    tf.write(data)
    tf.flush()

    #resign the osloader with new verity key
    cmd = ["ias_image_signer"]
    cmd.append(tf.name)
    cmd.extend([OPTIONS.oem_key+".pk8", OPTIONS.oem_key+".x509.pem"])
    cmd.append(out_f)
    p = common.Run(cmd)
    p.wait()
    tf.close()

def process_osloader(in_f, out_f):
    """
       get the abl binary from the in_f
       replace the .oemkeys section
       then combine back to a signed ias image
       with the new key
    """
    s = struct.Struct('11I')
    fh = open(in_f, "rb")
    u = s.unpack(fh.read(struct.calcsize(s.format)))
    data_len = u[3]
    data_off = u[4]

    fp = os.path.dirname(os.path.abspath(in_f))
    fh.seek(data_off, 0)
    for i in range(osloader_component_num):
        comp_len = u[7+i]
        fn = os.path.join(fp, "comp"+str(i))
        fc = open(fn, "wb")
        data = fh.read(comp_len)
        if i == 1:
            print "Replacing .oemkeys inside abl binary"
            password = None
            if OPTIONS.avb_key == None:
                data = replace_pem_keys(data, OPTIONS.oem_key, password)
            else:
                data = replace_raw_keys(data, OPTIONS.avb_key, password)
        fc.write(data)
        fc.close()

    #combine the individual component files back into the ias image
    unsigned_osloader_fn = os.path.join(fp, "osloader_unsigned.bin")
    cmd = ["ias_image_app"]
    cmd.extend(["-i", ias_image_type_str])
    cmd.extend(["-o", unsigned_osloader_fn])
    for i in range(osloader_component_num):
        fn = os.path.join(fp, "comp"+str(i))
        cmd.append(fn)
    p = common.Run(cmd)
    p.wait()
    fh.close()

    process_iasimage(unsigned_osloader_fn, out_f)

def process_tosimage(in_f, out_f):
    """
      resign the tos image with new verity key
    """
    s = struct.Struct('8B I I I I I I I I')
    fi = open(in_f, "rb")
    u = s.unpack(fi.read(struct.calcsize(s.format)))
    kernelSize = u[8]
    ramdskSize = u[10]
    secondSize = u[12]
    pageSize = u[15]
    length = pageSize \
         + ((kernelSize + pageSize - 1) / pageSize) * pageSize \
         + ((ramdskSize + pageSize - 1) / pageSize) * pageSize \
         + ((secondSize + pageSize - 1) / pageSize) * pageSize
    length = ((length + pageSize - 1) / pageSize) * pageSize

    tf = tempfile.NamedTemporaryFile()
    fi.seek(0, 0)
    tf.write(fi.read(length))
    tf.flush()
    fi.close()

    #resign the tos with new verity key
    cmd = ["boot_signer"]
    cmd.append("/tos")
    cmd.append(tf.name)
    cmd.extend([OPTIONS.oem_key+".pk8", OPTIONS.oem_key+".x509.pem"])
    cmd.append(out_f)
    p = common.Run(cmd)
    p.wait()
    tf.close()

def get_output_provzip():
    of_file = get_named_temp("output_provzip")
    output_provzip = zipfile.ZipFile(of_file, "w")
    return output_provzip, of_file


def main(argv):
    def option_handler(o, a):
        if o in ("-I", "--ifwi-directory"):
            OPTIONS.ifwi_directory = a
        elif o in ("-A", "--avb-key"):
            OPTIONS.avb_key = a
            OPTIONS.all_keys.add(a)
        elif o in ("-K", "--oem-key"):
            OPTIONS.oem_key = a
            OPTIONS.all_keys.add(a)
        elif o in ("-V", "--variant"):
            OPTIONS.variant = a
        elif o in ("-T", "--tos"):
            OPTIONS.tos_image = a
        elif o in ("-G", "--guest-target"):
            OPTIONS.guest_target = True
            global osloader_blk_offset
            global osloader_component_num
            osloader_blk_offset = 16384
            osloader_component_num = 2
        else:
            return False
        return True

    args = common.ParseOptions(argv, __doc__,
            extra_opts = "I:A:K:V:T:G",
            extra_long_opts = ["ifwi-directory=", "avb-key=", "oem-key=", "variant=", "tos=", "guest-target"],
            extra_option_handler = option_handler)

    if len(args) != 2:
        common.Usage(__doc__)
        sys.exit(1)

    output_zip = zipfile.ZipFile(args[1], "w", allowZip64=True)

    if OPTIONS.ifwi_directory.find("sbl") > 0:
        print "Using sbl"
        global osloader_blk_offset
        osloader_blk_offset = 16384

    print "Extracting the provdata.zip"
    prov_file = "provdata_"+OPTIONS.variant+".zip"
    unpack_dir = common.UnzipTemp(args[0])
    input_zip = zipfile.ZipFile(args[0], "r")
    input_provzip = zipfile.ZipFile(os.path.join(unpack_dir,
                "RADIO", prov_file), "r")

    print "Parsing build.prop for target_product"
    d = {}
    try:
        with open(os.path.join(unpack_dir, "SYSTEM", "build.prop")) as f:
            d = common.LoadDictionaryFromLines(f.read().split("\n"))
    except IOError, e:
       if e.errno == errno.ENOENT:
          raise KeyError(f)
    OPTIONS.target_product = d["ro.product.name"]

    print "Processing private keys"
    OPTIONS.info_dict = common.LoadInfoDict(input_zip)
    passwords = common.GetKeyPasswords(OPTIONS.all_keys)

    output_provzip, output_pz_file = get_output_provzip()

    #process the provdata.zip to generate resigned one
    process_provzip(input_provzip, output_provzip, passwords)
    output_provzip.close()

    #Get the multiboot.img name
    multiboot_fn = "RADIO/multiboot.img"
    multiboot_fn2 = "IMAGES/multiboot.img"

    #Get the tos.img name
    tos_fn = "RADIO/tos.img"
    tos_fn2 = "IMAGES/tos.img"

    #Get the bootloder.img name
    bootloader_fn = "RADIO/bootloader.img"
    bootloader_fn2 = "IMAGES/bootloader.img"

    #Get the fastboot binary name
    fastboot_fn = "RADIO/fastboot"

    print "Building destination target-files-package"
    prov_f = "RADIO/provdata_" + OPTIONS.variant + ".zip"
    for zi in input_zip.infolist():
        if zi.filename == prov_f:
            common.ZipWrite(output_zip, output_pz_file, zi.filename)
        elif zi.filename == multiboot_fn:
            input_multiboot_file = os.path.join(unpack_dir, multiboot_fn)
            output_multiboot_file = get_named_temp("output_multiboot")
            process_iasimage(input_multiboot_file, output_multiboot_file)
            common.ZipWrite(output_zip, output_multiboot_file, zi.filename)
            input_multiboot_file2 = os.path.join(unpack_dir, multiboot_fn2)
            if os.path.exists(input_multiboot_file2):
                 common.ZipWrite(output_zip, output_multiboot_file, multiboot_fn2)
        elif zi.filename == multiboot_fn2:
            pass
        elif zi.filename == tos_fn:
            if OPTIONS.avb_key == None:
                input_tos_file = os.path.join(unpack_dir, tos_fn)
                output_tos_file = get_named_temp("output_tos")
                process_tosimage(input_tos_file, output_tos_file)
                common.ZipWrite(output_zip, output_tos_file, zi.filename)
            else:
                common.ZipWrite(output_zip, OPTIONS.tos_image, zi.filename)
                output_tos_file = OPTIONS.tos_image
            input_tos_file2 = os.path.join(unpack_dir, tos_fn2)
            if os.path.exists(input_tos_file2):
                 common.ZipWrite(output_zip, output_tos_file, tos_fn2)
        elif zi.filename == tos_fn2:
            pass
        elif zi.filename == bootloader_fn:
            input_bootloader_file = os.path.join(unpack_dir, bootloader_fn)
            output_bootloader_file = get_named_temp("output_bootloader")
            process_bootloader(input_bootloader_file, output_bootloader_file)
            common.ZipWrite(output_zip, output_bootloader_file, zi.filename)
            input_bootloader_file2 = os.path.join(unpack_dir, bootloader_fn2)
            if os.path.exists(input_bootloader_file2):
                 common.ZipWrite(output_zip, output_bootloader_file, bootloader_fn2)
        elif zi.filename == bootloader_fn2:
            pass
        else:
            if (zi.file_size >= 2 * GiB):
                common.ZipWrite(output_zip, os.path.join(unpack_dir, zi.filename), zi.filename)
            else:
                common.ZipWriteStr(output_zip, zi, input_zip.read(zi))

    common.ZipClose(input_zip)
    common.ZipClose(output_zip)
    print "All done."

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except common.ExternalError, e:
        print
        print "   ERROR: %s" % (e,)
        print
        sys.exit(1)
    finally:
        common.Cleanup()
